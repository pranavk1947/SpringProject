server:
  port: 8080
  netty:
    connection-timeout: 2s
    idle-timeout: 15s

spring:
  application:
    name: real-time-trading-system
  
  profiles:
    active: local
  
  datasource:
    url: jdbc:postgresql://localhost:5432/trading_db
    username: trading_user
    password: trading_pass
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
  
  r2dbc:
    url: r2dbc:postgresql://localhost:5432/trading_db
    username: trading_user
    password: trading_pass
    pool:
      max-size: 20
      initial-size: 5
      max-idle-time: 30m
      max-life-time: 60m
  
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        jdbc:
          batch_size: 100
        order_inserts: true
        order_updates: true
  
  data:
    redis:
      host: localhost
      port: 6379
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 20
          max-idle: 10
          min-idle: 5
  
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
      batch-size: 16384
      linger-ms: 5
      buffer-memory: 33554432
    consumer:
      group-id: trading-system
      auto-offset-reset: latest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "com.trading.*"
        max.poll.records: 500
        fetch.min.bytes: 1024
        fetch.max.wait: 500
  
  security:
    jwt:
      secret: your-secret-key-here-change-in-production
      expiration: 86400000 # 24 hours

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true

logging:
  level:
    com.trading: DEBUG
    org.springframework.kafka: INFO
    org.springframework.data.r2dbc: INFO
    reactor.netty: INFO
  pattern:
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/trading-system.log

# Trading System Configuration
trading:
  engine:
    order-book:
      max-price-levels: 1000
      max-orders-per-level: 100000
    matching:
      batch-size: 1000
      processing-interval: 1ms
  
  risk:
    max-position-size: 1000000
    max-daily-loss: 100000
    circuit-breaker-threshold: 0.05
  
  market-data:
    buffer-size: 10000
    batch-processing-size: 100
    processing-interval: 1ms