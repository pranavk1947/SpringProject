package com.trading.order.controller;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.*;\nimport reactor.core.publisher.Flux;\nimport reactor.core.publisher.Mono;\n\nimport com.trading.order.dto.CreateOrderRequest;\nimport com.trading.order.dto.OrderResponse;\nimport com.trading.order.dto.UpdateOrderRequest;\nimport com.trading.order.service.OrderService;\nimport com.trading.common.dto.ApiResponse;\n\nimport jakarta.validation.Valid;\nimport jakarta.validation.constraints.Min;\nimport jakarta.validation.constraints.NotBlank;\n\n@Slf4j\n@RestController\n@RequestMapping(\"/api/v1/orders\")\n@RequiredArgsConstructor\n@Validated\npublic class OrderController {\n    \n    private final OrderService orderService;\n    \n    @PostMapping\n    public Mono<ResponseEntity<ApiResponse<OrderResponse>>> createOrder(\n            @Valid @RequestBody CreateOrderRequest request,\n            Authentication authentication) {\n        \n        String userId = authentication.getName();\n        log.info(\"Creating order for user: {}, symbol: {}\", userId, request.getSymbol());\n        \n        return orderService.createOrder(userId, request)\n                .map(orderResponse -> ResponseEntity.status(HttpStatus.CREATED)\n                        .body(ApiResponse.success(\"Order created successfully\", orderResponse)))\n                .doOnNext(response -> log.info(\"Order created successfully for user: {}\", userId))\n                .doOnError(error -> log.error(\"Failed to create order for user: {}\", userId, error));\n    }\n    \n    @PutMapping(\"/{orderId}\")\n    public Mono<ResponseEntity<ApiResponse<OrderResponse>>> updateOrder(\n            @PathVariable @NotBlank String orderId,\n            @Valid @RequestBody UpdateOrderRequest request,\n            Authentication authentication) {\n        \n        String userId = authentication.getName();\n        log.info(\"Updating order: {} for user: {}\", orderId, userId);\n        \n        return orderService.updateOrder(userId, orderId, request)\n                .map(orderResponse -> ResponseEntity.ok(\n                        ApiResponse.success(\"Order updated successfully\", orderResponse)))\n                .doOnNext(response -> log.info(\"Order updated successfully: {}\", orderId))\n                .doOnError(error -> log.error(\"Failed to update order: {}\", orderId, error));\n    }\n    \n    @DeleteMapping(\"/{orderId}\")\n    public Mono<ResponseEntity<ApiResponse<OrderResponse>>> cancelOrder(\n            @PathVariable @NotBlank String orderId,\n            Authentication authentication) {\n        \n        String userId = authentication.getName();\n        log.info(\"Cancelling order: {} for user: {}\", orderId, userId);\n        \n        return orderService.cancelOrder(userId, orderId)\n                .map(orderResponse -> ResponseEntity.ok(\n                        ApiResponse.success(\"Order cancelled successfully\", orderResponse)))\n                .doOnNext(response -> log.info(\"Order cancelled successfully: {}\", orderId))\n                .doOnError(error -> log.error(\"Failed to cancel order: {}\", orderId, error));\n    }\n    \n    @GetMapping(\"/{orderId}\")\n    public Mono<ResponseEntity<ApiResponse<OrderResponse>>> getOrder(\n            @PathVariable @NotBlank String orderId,\n            Authentication authentication) {\n        \n        String userId = authentication.getName();\n        \n        return orderService.getOrder(userId, orderId)\n                .map(orderResponse -> ResponseEntity.ok(\n                        ApiResponse.success(\"Order retrieved successfully\", orderResponse)));\n    }\n    \n    @GetMapping\n    public Flux<OrderResponse> getUserOrders(\n            @RequestParam(defaultValue = \"0\") @Min(0) int page,\n            @RequestParam(defaultValue = \"20\") @Min(1) int size,\n            Authentication authentication) {\n        \n        String userId = authentication.getName();\n        return orderService.getUserOrders(userId, page, size);\n    }\n    \n    @GetMapping(\"/symbol/{symbol}\")\n    public Flux<OrderResponse> getOrdersBySymbol(\n            @PathVariable @NotBlank String symbol,\n            @RequestParam(defaultValue = \"0\") @Min(0) int page,\n            @RequestParam(defaultValue = \"20\") @Min(1) int size) {\n        \n        return orderService.getOrdersBySymbol(symbol, page, size);\n    }\n    \n    @GetMapping(\"/health\")\n    public Mono<ResponseEntity<String>> health() {\n        return Mono.just(ResponseEntity.ok(\"Order service is healthy\"));\n    }\n}