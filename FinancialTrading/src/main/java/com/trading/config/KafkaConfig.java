package com.trading.config;

import lombok.RequiredArgsConstructor;
import org.apache.kafka.clients.admin.AdminClientConfig;\nimport org.apache.kafka.clients.admin.NewTopic;\nimport org.apache.kafka.clients.consumer.ConsumerConfig;\nimport org.apache.kafka.clients.producer.ProducerConfig;\nimport org.apache.kafka.common.serialization.StringDeserializer;\nimport org.apache.kafka.common.serialization.StringSerializer;\nimport org.springframework.boot.autoconfigure.kafka.KafkaProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.kafka.annotation.EnableKafka;\nimport org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;\nimport org.springframework.kafka.core.*;\nimport org.springframework.kafka.listener.ContainerProperties;\nimport org.springframework.kafka.support.serializer.JsonDeserializer;\nimport org.springframework.kafka.support.serializer.JsonSerializer;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n@Configuration\n@EnableKafka\n@RequiredArgsConstructor\npublic class KafkaConfig {\n    \n    private final KafkaProperties kafkaProperties;\n    \n    @Bean\n    public ProducerFactory<String, Object> producerFactory() {\n        Map<String, Object> props = new HashMap<>();\n        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaProperties.getBootstrapServers());\n        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, JsonSerializer.class);\n        props.put(ProducerConfig.ACKS_CONFIG, \"all\");\n        props.put(ProducerConfig.RETRIES_CONFIG, 3);\n        props.put(ProducerConfig.BATCH_SIZE_CONFIG, 16384);\n        props.put(ProducerConfig.LINGER_MS_CONFIG, 1);\n        props.put(ProducerConfig.BUFFER_MEMORY_CONFIG, 33554432);\n        props.put(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG, true);\n        props.put(ProducerConfig.MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION, 5);\n        \n        return new DefaultKafkaProducerFactory<>(props);\n    }\n    \n    @Bean\n    public KafkaTemplate<String, Object> kafkaTemplate() {\n        return new KafkaTemplate<>(producerFactory());\n    }\n    \n    @Bean\n    public ConsumerFactory<String, Object> consumerFactory() {\n        Map<String, Object> props = new HashMap<>();\n        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaProperties.getBootstrapServers());\n        props.put(ConsumerConfig.GROUP_ID_CONFIG, kafkaProperties.getConsumer().getGroupId());\n        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, JsonDeserializer.class);\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"latest\");\n        props.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, false);\n        props.put(ConsumerConfig.MAX_POLL_RECORDS_CONFIG, 500);\n        props.put(ConsumerConfig.FETCH_MIN_BYTES_CONFIG, 1024);\n        props.put(ConsumerConfig.FETCH_MAX_WAIT_MS_CONFIG, 500);\n        props.put(JsonDeserializer.TRUSTED_PACKAGES, \"com.trading.*\");\n        \n        return new DefaultKafkaConsumerFactory<>(props);\n    }\n    \n    @Bean\n    public ConcurrentKafkaListenerContainerFactory<String, Object> kafkaListenerContainerFactory() {\n        ConcurrentKafkaListenerContainerFactory<String, Object> factory = \n                new ConcurrentKafkaListenerContainerFactory<>();\n        factory.setConsumerFactory(consumerFactory());\n        factory.setConcurrency(3);\n        factory.getContainerProperties().setAckMode(ContainerProperties.AckMode.MANUAL_IMMEDIATE);\n        return factory;\n    }\n    \n    @Bean\n    public KafkaAdmin kafkaAdmin() {\n        Map<String, Object> configs = new HashMap<>();\n        configs.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaProperties.getBootstrapServers());\n        return new KafkaAdmin(configs);\n    }\n    \n    // Topic definitions\n    @Bean\n    public NewTopic orderEventsTopic() {\n        return new NewTopic(\"order-events\", 12, (short) 3);\n    }\n    \n    @Bean\n    public NewTopic orderUpdatesTopic() {\n        return new NewTopic(\"order-updates\", 12, (short) 3);\n    }\n    \n    @Bean\n    public NewTopic tradeEventsTopic() {\n        return new NewTopic(\"trade-events\", 12, (short) 3);\n    }\n    \n    @Bean\n    public NewTopic marketDataTopic() {\n        return new NewTopic(\"market-data\", 12, (short) 3);\n    }\n}